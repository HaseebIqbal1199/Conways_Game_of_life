// Selectors
const container = document.querySelector(".container")

// Mesh Dimensions
let rows = 15;
let cols = 15;

// Mesh BluePrint
let mesh = null;

function initMeshBluePrint(){
    mesh = new Array(rows);
    for (let i = 0; i < rows; i++) {
        mesh[i] = new Array(cols);
    }
}
function populateMeshBluePrint(){
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            mesh[i][j] = 0;
        }
    }
}

// Utilities function
function initMeshUi() {
    container.innerHTML = ""; // Clear first

    // Set CSS grid layout columns dynamically
    container.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
    container.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
    container.style.minWidth = "300px"; // Optional fallback
    container.style.width = "90vmin";   // Relative to screen size
    container.style.maxWidth = "90vmin";
    container.style.aspectRatio = "1 / 1"; // Keep it square

    for (let i = 0; i < rows * cols; i++) {
        container.innerHTML += `<div class="cell"></div>`;
    }
}


function updateMeshUi() {
    let cells = document.querySelectorAll(".cell")
    console.log(cells);  
    let dim = rows * cols;
    let counter = 0;
    for (let i = 0; i < rows; i++){
        for (let j = 0; j < cols; j++){
            if(mesh[i][j] == 0){
                cells[counter++].classList.remove('cell_active')
            }
            if(mesh[i][j] == 1){
                cells[counter++].classList.add('cell_active')
            }
        }
    }
}

function Conways_validation(found_count, cell_x) {
    const isAlive = cell_x === 1;

    if (isAlive) {
        if (found_count < 2 || found_count > 3) return 0;
        if (found_count === 2 || found_count === 3) return 1;
    } else {
        if (found_count === 3) return 1;
    }
    return 0; // Default return
}


function actual_game() {
    let found = 0;
    let next_mesh = new Array(rows).fill(null).map(() => new Array(cols).fill(0));

    // Neighbours coordinated
    // [-1, -1] [-1, 0] [-1, 1]
    // [0, -1]          [0, 1]
    // [-1, 1] [1, 0]   [1, 1]

    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            found  = 0;

            if(i-1 >= 0 && j-1 >= 0 && mesh[i-1][j-1]){ found++ }
            if(i-1 >= 0 && j >= 0 && mesh[i-1][j]){ found++ }
            if(i-1 >= 0 && j+1 >= 0 && mesh[i-1][j+1]){ found++ }
            if(i >= 0 && j-1 >= 0 && mesh[i][j-1]){ found++ }
            if(i >= 0 && j+1 < cols && mesh[i][j+1]){ found++ }
            if(i+1 < rows && j-1 < cols && mesh[i+1][j-1]){ found++ }
            if(i+1 < rows && j >= 0 && mesh[i+1][j]){ found++ }
            if(i+1 < rows && j+1 < cols && mesh[i+1][j+1]){ found++ }

            next_mesh[i][j] = Conways_validation(found, mesh[i][j])

        }
    }
    
    mesh = next_mesh;
    updateMeshUi();
}

function run_gol() {
    initMeshBluePrint();
    populateMeshBluePrint();
    initMeshUi();
    updateMeshUi();
    mesh[1][1] = 1;
    mesh[1][4] = 1;
    mesh[2][0] = 1;
    mesh[3][0] = 1;
    mesh[4][0] = 1;
    mesh[4][1] = 1;
    mesh[4][2] = 1;
    mesh[3][3] = 1;
    updateMeshUi();
    setInterval(() => {
        actual_game()
    }, 200);

}


run_gol()
